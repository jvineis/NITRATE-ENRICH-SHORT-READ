#!/usr/bin/env python
import argparse
from Bio import SeqIO
## At the moment this script is used to generate the coverage of each MAG in a single sample, but could be "improved" to include a list of samples etc"
parser = argparse.ArgumentParser(description='''tabulate the coverage for the gene of interest as generated by anvi-get-sequences-for-hmm-hits (or somethign verymuch like that''')
parser.add_argument('--cov', help='the resulting file specified by covstats=<file> in the bbmap command')
parser.add_argument('--out', help='the file to write the awesome results including the MAG name and the coverage')
parser.add_argument('--fa', help='the fasta file returned by anvi-get-sequences-for-hmm-hits -- containing the scaffold information that matches the names in the mappingfile')
args=parser.parse_args()

target = args.cov.split('/')[1].split("-vs-")[0]
print(target)

# Create the dictionary of the scaffold ids and coverages
covstats = {}
for line in open(args.cov):
    x = line.strip().split()
    covstats[x[0]] = x[0:len(x)]

if len(covstats.keys()) > 2:
    outfile = open(args.out, 'w')
    outfile.write("scaffold"+'\t'+str(args.cov)+'\n')
else:
    exit()
#for key in covstats.keys():
#    print(key)


#loop through the fasta file deflines and search each of the scaffold ids in the dictionary

for seq_record in SeqIO.parse(args.fa, "fasta"):
    print(seq_record.id)
    parts = seq_record.id.split(":")[4].split("|")[0].split("_")[1:4]
    name = parts[0]+'_'+parts[1]+'_'+parts[2]
    sample = seq_record.id.split(":")[1].split("|")[0]
    print(target,sample,name)
    if sample==target and name in covstats.keys():
        outfile.write(target+'_'+name+'\t'+covstats[name][1]+'\n')
#        print(name, covstats[name])



#print(seq_record.id)

